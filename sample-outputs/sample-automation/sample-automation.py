"""
Sample Test Automation Script
Generated by TestTeller Automator Agent

This script demonstrates automated test execution for a web application
including login, product search, and shopping cart functionality.
"""

import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options


class TestUserAuthentication:
    """Test cases for user authentication functionality"""
    
    @pytest.fixture
    def driver(self):
        """Setup Chrome driver with options"""
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Run in headless mode
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.implicitly_wait(10)
        yield driver
        driver.quit()
    
    def test_valid_login(self, driver):
        """
        Test Case ID: TC001
        Verify that a user can successfully log in with valid credentials
        """
        # Navigate to login page
        driver.get("https://example-app.com/login")
        
        # Enter valid credentials
        username_field = driver.find_element(By.ID, "username")
        password_field = driver.find_element(By.ID, "password")
        login_button = driver.find_element(By.ID, "login-btn")
        
        username_field.send_keys("testuser@example.com")
        password_field.send_keys("ValidPass123!")
        login_button.click()
        
        # Wait for dashboard to load
        wait = WebDriverWait(driver, 10)
        dashboard = wait.until(EC.presence_of_element_located((By.ID, "dashboard")))
        
        # Verify successful login
        assert driver.current_url.endswith("/dashboard")
        welcome_msg = driver.find_element(By.CLASS_NAME, "welcome-message")
        assert "Welcome" in welcome_msg.text
        
        # Verify session token exists
        cookies = driver.get_cookies()
        session_cookie = next((cookie for cookie in cookies if cookie['name'] == 'session_token'), None)
        assert session_cookie is not None
    
    def test_invalid_login(self, driver):
        """
        Test Case ID: TC002
        Verify that login fails with invalid credentials
        """
        # Navigate to login page
        driver.get("https://example-app.com/login")
        
        # Enter invalid credentials
        username_field = driver.find_element(By.ID, "username")
        password_field = driver.find_element(By.ID, "password")
        login_button = driver.find_element(By.ID, "login-btn")
        
        username_field.send_keys("invalid@example.com")
        password_field.send_keys("wrongpassword")
        login_button.click()
        
        # Wait for error message
        wait = WebDriverWait(driver, 10)
        error_msg = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "error-message")))
        
        # Verify login failure
        assert "Invalid username or password" in error_msg.text
        assert driver.current_url.endswith("/login")
        
        # Verify no session token
        cookies = driver.get_cookies()
        session_cookie = next((cookie for cookie in cookies if cookie['name'] == 'session_token'), None)
        assert session_cookie is None


class TestProductSearch:
    """Test cases for product search functionality"""
    
    @pytest.fixture
    def authenticated_driver(self):
        """Setup driver with authenticated user session"""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.implicitly_wait(10)
        
        # Login first
        driver.get("https://example-app.com/login")
        driver.find_element(By.ID, "username").send_keys("testuser@example.com")
        driver.find_element(By.ID, "password").send_keys("ValidPass123!")
        driver.find_element(By.ID, "login-btn").click()
        
        # Wait for dashboard
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "dashboard"))
        )
        
        yield driver
        driver.quit()
    
    def test_product_search(self, authenticated_driver):
        """
        Test Case ID: TC003
        Verify that users can search for products
        """
        driver = authenticated_driver
        
        # Navigate to products page
        driver.get("https://example-app.com/products")
        
        # Perform search
        search_box = driver.find_element(By.ID, "search-input")
        search_button = driver.find_element(By.ID, "search-btn")
        
        search_box.send_keys("laptop")
        search_button.click()
        
        # Wait for results
        wait = WebDriverWait(driver, 10)
        results_container = wait.until(
            EC.presence_of_element_located((By.CLASS_NAME, "search-results"))
        )
        
        # Verify search results
        product_items = driver.find_elements(By.CLASS_NAME, "product-item")
        assert len(product_items) >= 5, "Should have at least 5 results"
        
        # Check if results contain laptops
        for item in product_items[:3]:  # Check first 3 items
            product_name = item.find_element(By.CLASS_NAME, "product-name").text.lower()
            assert "laptop" in product_name or "computer" in product_name
        
        # Verify results count is displayed
        results_count = driver.find_element(By.CLASS_NAME, "results-count")
        assert results_count.is_displayed()


class TestShoppingCart:
    """Test cases for shopping cart functionality"""
    
    @pytest.fixture
    def authenticated_driver(self):
        """Setup driver with authenticated user session"""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.implicitly_wait(10)
        
        # Login first
        driver.get("https://example-app.com/login")
        driver.find_element(By.ID, "username").send_keys("testuser@example.com")
        driver.find_element(By.ID, "password").send_keys("ValidPass123!")
        driver.find_element(By.ID, "login-btn").click()
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "dashboard"))
        )
        
        yield driver
        driver.quit()
    
    def test_add_item_to_cart(self, authenticated_driver):
        """
        Test Case ID: TC004
        Verify that users can add items to shopping cart
        """
        driver = authenticated_driver
        
        # Navigate to a specific product
        driver.get("https://example-app.com/products/LAPTOP001")
        
        # Select quantity and add to cart
        quantity_selector = driver.find_element(By.ID, "quantity")
        add_to_cart_btn = driver.find_element(By.ID, "add-to-cart")
        
        # Clear and set quantity to 2
        quantity_selector.clear()
        quantity_selector.send_keys("2")
        add_to_cart_btn.click()
        
        # Wait for success message
        wait = WebDriverWait(driver, 10)
        success_msg = wait.until(
            EC.presence_of_element_located((By.CLASS_NAME, "success-message"))
        )
        assert "added to cart" in success_msg.text.lower()
        
        # Check cart icon update
        cart_icon = driver.find_element(By.ID, "cart-icon")
        cart_count = cart_icon.find_element(By.CLASS_NAME, "cart-count")
        assert cart_count.text == "2"
        
        # Navigate to cart and verify items
        cart_icon.click()
        
        # Wait for cart page to load
        cart_items = wait.until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "cart-item"))
        )
        
        # Verify product is in cart with correct details
        assert len(cart_items) >= 1
        
        first_item = cart_items[0]
        product_name = first_item.find_element(By.CLASS_NAME, "product-name").text
        quantity_display = first_item.find_element(By.CLASS_NAME, "quantity").text
        
        assert "Gaming Laptop Pro" in product_name
        assert "2" in quantity_display
        
        # Verify total price
        total_element = driver.find_element(By.CLASS_NAME, "cart-total")
        total_text = total_element.text
        assert "$2,599.98" in total_text


class TestDataProvider:
    """Test data provider for parameterized tests"""
    
    @staticmethod
    def get_login_test_data():
        """Provide test data for login scenarios"""
        return [
            {
                "username": "testuser@example.com",
                "password": "ValidPass123!",
                "expected_result": "success",
                "expected_url": "/dashboard"
            },
            {
                "username": "invalid@example.com", 
                "password": "wrongpassword",
                "expected_result": "failure",
                "expected_error": "Invalid username or password"
            },
            {
                "username": "",
                "password": "ValidPass123!",
                "expected_result": "failure", 
                "expected_error": "Username is required"
            }
        ]
    
    @staticmethod
    def get_search_test_data():
        """Provide test data for search scenarios"""
        return [
            {
                "search_term": "laptop",
                "expected_min_results": 5,
                "expected_categories": ["Electronics", "Computers"]
            },
            {
                "search_term": "phone",
                "expected_min_results": 3,
                "expected_categories": ["Electronics", "Mobile"]
            },
            {
                "search_term": "xyz123nonexistent",
                "expected_min_results": 0,
                "expected_message": "No products found"
            }
        ]


if __name__ == "__main__":
    """
    Run tests with pytest:
    pytest sample-automation.py -v --html=report.html
    """
    pytest.main([__file__, "-v", "--tb=short"])